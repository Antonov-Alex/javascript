'use strict';

/*
  –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∫–∞—Å—Å–∏—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –¥–µ–Ω—å–≥–∏, 
  –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç 
  –¥–µ–Ω–µ–≥ –∏–ª–∏ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
*/

/* –ï—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è-—Ç–æ–≤–∞—Ä–∞":"—Ü–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É" */
const products = {
  bread: 10,
  milk: 15,
  apples: 20,
  chicken: 50,
  cheese: 40,

};

const order = {
  bread: 2,
  milk: 2,
  apples: 1,
  cheese: 1
};

let totalPrice = 0;
let customerMoney = 0;
let changeAmount = 0;

function Cashier(name, productsDatabase) {
  // üîî –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ this –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –∏ –º–µ—Ç–æ–¥–∞–º –±—É–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
  this.name = name;
  this.productsDatabase = products;

  this.totalPrice = totalPrice;
  this.customerMoney = customerMoney;
  this.changeAmount = changeAmount;
  this.greet = function () {
    console.log(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç ${this.name}`);

  }
  this.countTotalPrice = function (order) {

    const keys = Object.keys(order);
    for (const key of keys) {


      if (products[key]) {
        totalPrice += (order[key] * products[key]);
      }
    }
    console.log('–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ = ', totalPrice);
  }

  this.getCustomerMoney = function (customerMoney) {
    console.log('–°—É–º–º–∞ –∫–æ—Ç–æ—Ä–∞—è –µ—Å—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞ =', customerMoney);
  }

  this.onSuccess = function () {
    if (changeAmount > 0) {
      return console.log(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ ${changeAmount}`);
    } else if (changeAmount = 0) {
      return console.log(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É`);
    }

  }

  this.onError = function () {
    if (customerMoney < totalPrice) {
      return console.log('–û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏');
    }

  }

  this.countChange = function (customerMoney) {
    changeAmount = customerMoney - totalPrice;
    if (customerMoney >= totalPrice) {
      return changeAmount;

    }
    return totalPrice = null;

  }
  this.reset = function (totalPrice, customerMoney, changeAmount) {

    this.totalPrice = 0;
    this.customerMoney = 0;
    this.changeAmount = 0;

  }
};

const mango = new Cashier('Mango', products);
console.log(mango.name);
console.log(mango.productsDatabase); // —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–±—ä–µ–∫—Ç products)
console.log('totalPrise : ', mango.totalPrice); // 0
console.log('customerMoney :', mango.customerMoney); // 0
console.log('changeAmount :', mango.changeAmount); // 0

mango.greet(); // –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç Mango;
mango.countTotalPrice(order); //
mango.getCustomerMoney(300);
const result = mango.countChange(300);

if (result !== null) {
  // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onSuccess
  mango.onSuccess(); // –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ 190
} else {
  // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onError   
  mango.onError(); // –û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏
};
mango.reset();
console.log('totalPrise : ', mango.totalPrice); // 0
console.log('customerMoney :', mango.customerMoney); // 0
console.log('changeAmount :', mango.changeAmount); // 0
